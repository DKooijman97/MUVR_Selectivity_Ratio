str(plants)
?sample
sample(1:6,4, replace = TRUE).
sample(1:6, 4, replace = TRUE).
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS, 26)
sample(LETTERS, 26, replace = FALSE)
sample(LETTERS, 26, replace = TRUE)
sample(LETTERS)
flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 1, prob = 0.7, n =100)
rbinom(x = 1, size = 1, prob = 0.7, n =100)
rbinom(size = 1, prob = 0.7, n =100)
flips2 = rbinom(size = 1, prob = 0.7, n =100)
flips2 <- rbinom(size = 1, prob = 0.7, n =100)
flips2
sum(flips)
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 ,- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, cars$distance)
plot(x = cars$speed, y =cars$distance)
plot(x = cars$speed, y =cars$dist)
plot(x = cars$dist, y =cars$speed)
plot(x = cars$speed, y =cars$dist)
plot(x = cars$speed, y =cars$dist, xlabel = speed)
plot(x = cars$speed, y =cars$dist, xlabel = "speed")
plot(x = cars$speed, y =cars$dist, xlab = "speed")
plot(x = cars$speed, y =cars$dist, xlab = "Speed")
plot(x = cars$speed, y =cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping
| Distance"
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",
| ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
load(mtcars)
load mtcars
load("mtcars")
load(mtcars)
?load
data("mtcars")
data(mtcars)
str(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("ggplot2")
library(ggplot2)
plot(cars)
qplot(cars)
View(cars)
View(cars)
?qplot
qplot(x= cars$speed, y = cars$dist)
qplot(displ,hwy,data =mpg)
qplot(displ,hwy,data =mpg, color = drv)
qplot(displ,hwy,data =mpg, color = drv, geom(c("point, "smooth" )))
qplot(displ,hwy,data =mpg, color = drv, geom =(c("point,"smooth")))
qplot(displ,hwy,data =mpg, color = drv, geom =c("point,"smooth"))
qplot(displ,hwy,data =mpg, color = drv, geom =c("point", "smooth"))
qplot(displ,hwy,data =mpg, geom =c("point", "smooth"))
qplot(displ,hwy,data =mpg, geom =c("point", "smooth"), color = drv)
qplot(displ,hwy,data =mpg, geom =c("point", "smooth"))
swirl()
swirl()
install_course("Exploratory_Data_Analysis")
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(aes(displ,  hwy), mpg)
qplot(aes= c(displ,  hwy), mpg)
?qplot
qplot(displ,  hwy,data = mpg)
qplot(displ,  hwy,data = mpg, color = drv)
qplot(displ,  hwy,data = mpg, color = drv, geom_smooth(c("point", "smooth")))
qplot(displ,  hwy,data = mpg, color = drv, geom_smooth=c("point", "smooth"))
qplot(displ,  hwy,data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy,data = mpg, color = drv)
myhigh
qplot(drv, hwy, mpg,geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot",  color = "manufactorer")
qplot(drv, hwy, data = mpg, geom = "boxplot",  color = manufactorer)
qplot(drv, hwy, data = mpg, geom = "boxplot",  color = manufacturer)
qplot(hwy, data = mpg, fill = drv,)
qplot(displ, hwy, data = mpg, facets = .~drv )
play()
qplot(displ, hwy, data = mpg, facets = .~drv, color = drv )
nxt()
qplot(hwy, data = mpg, factes = drv~., binwidth = 2 )
qplot(hwy, data = mpg, facetes = drv~., binwidth = 2 )
qplot(hwy, data = mpg, facets = drv~., binwidth = 2 )
qplot(displ, hwy, data = mpg, geom = c("point". "smooth", facets = .~drv))
qplot(displ, hwy, data = mpg, geom = c("point". "smooth"), facets = .~drv))
qplot(displ, hwy, data = mpg, geom = c("point". "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(mpg, c("displ", "hwy"))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth="lm"
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point(color="pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), labs(x = "Displacements", y = "Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), labs(x = Displacement, y = Hwy Mileage))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"))
?labs
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab = "Displacement")
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab("Displacement")
)
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab(Displacement)
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab(Displacement))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab("Displacement"))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), xlab(Displacement), ylab("Hwy Mileage"))
g + geom_point(aes(color = drv), labs(title="Swirl Rules!"), ylab("Hwy Mileage"))
library(swirl)
swirl()
g + geom_point(color = drv) + labs(title = "Swirl Rules!"), xlab(Displacement), ylab(Hwy Mileage)
g + geom_point(color = drv + labs(title = "Swirl Rules!"), labs( xlab=Displacement, ylab =Hwy Mileage) )
g + geom_point(color = drv + labs(title = "Swirl Rules!"), labs( xlab="Displacement", ylab ="Hwy Mileage") )
g + geom_point(color = "drv" + labs(title = "Swirl Rules!"), labs( xlab="Displacement", ylab ="Hwy Mileage") )
g + geom_point(color = "drv", labs(title = "Swirl Rules!"), labs( xlab="Displacement", ylab ="Hwy Mileage") )
g + geom_point(color = "drv") + labs(title = "Swirl Rules!"), labs( xlab="Displacement", ylab ="Hwy Mileage") )
g + geom_point(color = "drv") + labs(title = "Swirl Rules!"), labs( xlab="Displacement", ylab ="Hwy Mileage")
info()
skip()
library(MUVR)
detectCores()
detectCores()
library(doParallel)
detectCores()
regrModel[["VIPPerRep"]]
# Call in the "freelive" data from the MUVR package
data("freelive")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
View(XRVIP)
qplot(XRVIP)
library(qqplot)
library(ggplot)
library(ggplot2)
qplot(XRVIP)
qplot(XRVIP[:,1])
qplot(XRVIP[,1])
head(XRVIP)
str(XRVIP)
plot(XRVIP)
plot(XRVIP)
qplot(XRVIP[1,])
rows <- vector(mode = "logical", length = dim(XRVIP))
dim(XRVIP)
length_rows <- dim(XRVIP)
rows <- vector(mode = "logical", length = length_rows[2])
head(rows)
?vectro
?vector
rows <- 1:length_rows
rows
rows <- 1:length_rows[2]
rows
qplot(rows, XRVIP[1,])
?order
XRVIP_order <- order(XRVIP[,1])
head(XRVIP_order)
qplot(rows, XRVIP_order)
str(XRVIP_order)
XRVIP_order <- order(XRVIP[1,])
qplot(rows, XRVIP_order)
columsn <- rows
qplot(columsn, XRVIP_order)
columns <- columsn
qplot(columns, XRVIP_order)
View(regrModel)
View(regrModel)
qplot(XRVIP_order)
library(ggplot2)
qplot(XRVIP_order)
qplot(XRVIP_order, bins = length(XRVIP_order))
qplot(XRVIP_order, binwidth = 1)
qplot(columns, XRVIP_order)
plot(columns, XRVIP_order)
XRVIP_order[,25]
XRVIP_order[25]
XRVIP_order[1:25]
XRVIP_order <- order(XRVIP_order)
XRVIP_order
?order
XRVIP_order <- order(XRVIP_order, decreasing = TRUE)
XRVIP[1:25]
XRVIP_order[order(XRVIP_order, decreasing = TRUE)]
XRVIP_order
XRVIP_order <- XRVIP_order[order(XRVIP_order, decreasing = TRUE)]
XRVIP_order[1:25]
qplot(columns, XRVIP_order)
plot(columns, XRVIP_order)
qplot(columns, XRVIP_order)
qplot(columns, XRVIP_order[1:100])
qplot(columns[100], XRVIP_order[1:100])
qplot(columns[1:100], XRVIP_order[1:100])
qplot(columns[1:25], XRVIP_order[1:25])
View(XRVIP)
XRVIP_cmean <- mean(XRVIP)
?mean
XRVIP_cmean <- colmean(XRVIP)
XRVIP_cmean <- colMeans(XRVIP)
XRVIP_cmean <- XRVIP_cmean[order(XRVIP_cmean, decreasing = TRUE)]
qplot(columns[1:25], XRVIP_cmean[1:25])
qplot(columns, XRVIP_cmean)
qplot(columns, XRVIP_cmean)
library(ggplot2)
qplot(columns, XRVIP_cmean)
variables = columns
qplot(variables, XRVIP_cmean)
qplot(columns, log(XRVIP_cmean, 10)
)
qplot(columns, 1/XRVIP_cmean)
qplot(columns[1/50], 1/XRVIP_cmean[1/50])
qplot(columns[1:50], 1/XRVIP_cmean[1:50])
qplot(columns, 1/XRVIP_cmean)
qplot(columns[1:50], 1/XRVIP_cmean[1:50])
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("mixOmics")
browseVignettes("mixOmics")
browseVignettes("MUVR")
library("MUVR")
browseVignettes("MUVR")
?'%*%'
?t
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
Sratio(param)
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
install.packages('mdatools_0.9.0.tar.gz')
setwd("~/Master/Advanced statistics/Project/MUVR")
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
# Set method parameters
nCore=detectCores()-1   # Number of processor threads to use
rm(list = ls())
###################################################
# Regression example using the "freelive" data
# Call in relevant libraries
library(doParallel)     # Parallel processing
###################################################
# Regression example using the "freelive" data
# Call in relevant libraries
library(doParallel)     # Parallel processing
#library(MUVR)           # Multivariate modelling       (in workspace)
# Call in the "freelive" data from the MUVR package
data("freelive")
# Set method parameters
nCore=detectCores()-1   # Number of processor threads to use
nRep=nCore              # Number of MUVR repetitions
nOuter=8                # Number of outer cross-validation segments
varRatio=0.8            # Proportion of variables kept per iteration
method='PLS'            # Selected core modelling algorithm
# Set up parallel processing
cl=makeCluster(nCore)
registerDoParallel(cl)
# Perform modelling
regrModel = MUVR(X=XRVIP, Y=YR, ID=IDR, nRep=nRep, nOuter=nOuter, varRatio=varRatio, method=method)
# 1.4 mins using 7 threads on a Mac Powerbook Pro mid-2015 with 2,8 GHz Intel Core i7.
# Stop parallel processing
stopCluster(cl)
rm(list = ls())
remove(index)
clc
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
load("~/Master/Advanced statistics/Project/MUVR/.RData")
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
warnings()
load("~/Master/Advanced statistics/Project/MUVR/freelive.rda")
###################################################
# Regression example using the "freelive" data
# Call in relevant libraries
library(doParallel)     # Parallel processing
#library(MUVR)           # Multivariate modelling       (in workspace)
# Call in the "freelive" data from the MUVR package
#data("freelive")
# Set method parameters
nCore=detectCores()-1   # Number of processor threads to use
nRep=nCore              # Number of MUVR repetitions
nOuter=8                # Number of outer cross-validation segments
varRatio=0.8            # Proportion of variables kept per iteration
method='PLS'            # Selected core modelling algorithm
# Set up parallel processing
cl=makeCluster(nCore)
registerDoParallel(cl)
# Perform modelling
regrModel = MUVR(X=XRVIP, Y=YR, ID=IDR, nRep=nRep, nOuter=nOuter, varRatio=varRatio, method=method)
# 1.4 mins using 7 threads on a Mac Powerbook Pro mid-2015 with 2,8 GHz Intel Core i7.
# Stop parallel processing
stopCluster(cl)
source('~/Master/Advanced statistics/Project/MUVR/vectSamp.R')
source('~/Master/Advanced statistics/Project/MUVR/varClass.R')
source('~/Master/Advanced statistics/Project/MUVR/rfInner.R')
source('~/Master/Advanced statistics/Project/MUVR/rdCV.R')
source('~/Master/Advanced statistics/Project/MUVR/rdCV.R')
source('~/Master/Advanced statistics/Project/MUVR/preProcess.R')
source('~/Master/Advanced statistics/Project/MUVR/predMV.R')
source('~/Master/Advanced statistics/Project/MUVR/predict.R')
source('~/Master/Advanced statistics/Project/MUVR/pPerm.R')
source('~/Master/Advanced statistics/Project/MUVR/plotVIP.R')
source('~/Master/Advanced statistics/Project/MUVR/permutations.R')
source('~/Master/Advanced statistics/Project/MUVR/permutationPlot.R')
source('~/Master/Advanced statistics/Project/MUVR/nearZeroVar.R')
source('~/Master/Advanced statistics/Project/MUVR/mergeModels.R')
source('~/Master/Advanced statistics/Project/MUVR/confusionMatrix.R')
source('~/Master/Advanced statistics/Project/MUVR/biplotPLS.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/MUVR/plsda.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/vip.R')
source('~/Master/Advanced statistics/Project/MUVR/pls.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
View(regrModel)
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
rm(XRVIP_cmean)
rm(XRVIP_order, YR, varRatio, variables, rows, nREP, nOuter, nCore,method, length_rows, IDR, columsn, columns)
rm(nRep)
rm(cl)
rm(regrModel)
rm(XRVIP)
load("~/Master/Advanced statistics/Project/MUVR/freelive.rda")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
View(regrModel$VIP)
library(ggplot2)
qplot(1:(size(regrModel$VIP)[2]), regrModel$VIP[,2])
qplot(1:(dim(regrModel$VIP)[2]), regrModel$VIP[,2])
dim(regrModel$VIP)
qplot(1:(dim(regrModel$VIP)[1]), regrModel$VIP[,2])
qplot(1:(dim(regrModel$VIP)[1]), 1/regrModel$VIP[,2])
?qplot
View(regrModel$VIPPerRep$midModel)
rm(vip)
rm(cl)
rm(regrModel)
rm(XRVIP)
load("~/Master/Advanced statistics/Project/MUVR/freelive.rda")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plotVIP.R')
plotVIP(regrModel, model = "mid")
regrModel_Sratio <- regrModel
source('~/Master/Advanced statistics/Project/MUVR/vip.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
rm(regrModel)
rm(cl)
rm(XRVIP)
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
load("~/Master/Advanced statistics/Project/MUVR/freelive.rda")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
regrModel <- regrModel_VIP
regrModel_VIP <- regrModel
rm(regrModel)
View(regrModel_Sratio$VIP)
qplot(regrModel_VIP$VIP, regrModel_Sratio$VIP)
qplot(regrModel_VIP$VIP[,2], regrModel_Sratio$VIP[,2])
regrModel_VIP$VIP[,2]
str(regrModel_VIP$VIP[,2])
qplot(regrModel_VIP$VIP[,2], regrModel_Sratio$VIP[,2])
dev.off()
qplot(regrModel_VIP$VIP[,2], regrModel_Sratio$VIP[,2])
qplot(1:dim(regrModel_VIP$VIP[,2]),regrModel_VIP$VIP[,2], regrModel_Sratio$VIP[,2])
qplot(1:dim(regrModel_VIP$VIP[,2]), regrModel_Sratio$VIP[,2])
qplot(1:dim(regrModel_VIP$VIP[1]), regrModel_Sratio$VIP[,2])
qplot(1:length(regrModel_VIP$VIP[1]), regrModel_Sratio$VIP[,2])
qplot(1:length((regrModel_VIP$VIP[,1]), regrModel_Sratio$VIP[,2])
)
qplot(1:length((regrModel_VIP$VIP[,1])), regrModel_Sratio$VIP[,2])
?order
?sort.list
order(regrModel_Sratio$VIP)
order(regrModel_Sratio$VIP)
Sratio_order <- regrModel_Sratio$VIP[order(regrModel_Sratio$VIP[2], decrease = TRUE)]
head(Sratio_order)
Sratio_order <- regrModel_Sratio$VIP[order(regrModel_Sratio$VIP[2], decrease = FALSE)]
Sratio_order
View(XRVIP)
View(regrModel_Sratio)
rm(Sratio_order)
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
View(vip)
rm(vip)
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/Sratio.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
warnings()
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
remove.packages("MUVR")
remove.packages("MUVR")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
install.packages("MUVR")
install.packages("MUVR")
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/MUVR/plsInner.R')
source('~/Master/Advanced statistics/Project/MUVR/MUVR.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
install.packages("MUVR")
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
source('~/Master/Advanced statistics/Project/FREELIVE_TUTORIAL_CODE.R')
